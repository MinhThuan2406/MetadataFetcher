import json
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import sys
import os

def add_section_heading(doc, text, level=1):
    heading = doc.add_heading(text, level=level)
    heading.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

def add_key_value_table(doc, data):
    table = doc.add_table(rows=0, cols=2)
    table.style = 'Light List Accent 1'
    for key, value in data.items():
        row_cells = table.add_row().cells
        row_cells[0].text = str(key)
        row_cells[1].text = str(value) if value is not None else ""
    doc.add_paragraph()  # Add space after table

def add_bullet_list(doc, items, title=None, style='List Bullet'):
    if title:
        doc.add_paragraph(title, style=style)
    for item in items:
        doc.add_paragraph(str(item), style=style)

def json_to_professional_word(json_path):
    import os
    # Ensure output directory exists
    output_dir = os.path.join('SampleOutputs', 'docs')
    os.makedirs(output_dir, exist_ok=True)
    # Output filename: same as input JSON, but .docx
    base_name = os.path.splitext(os.path.basename(json_path))[0]
    word_path = os.path.join(output_dir, f"{base_name}.docx")

    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    doc = Document()
    # Title Page
    doc.add_heading('Tool Metadata Report', 0)
    doc.add_paragraph('Generated by MetadataFetcher', style='Intense Quote')
    doc.add_paragraph()  # Blank line

    # General Info
    add_section_heading(doc, 'General Information', level=1)
    add_key_value_table(doc, data.get('General Info', {}))

    # Documentation
    add_section_heading(doc, 'Documentation', level=1)
    doc_info = data.get('Documentation', {})
    if doc_info.get('Main Documentation'):
        doc.add_paragraph('Main Documentation:', style='List Bullet')
        doc.add_paragraph(doc_info['Main Documentation'], style='List Bullet 2')
    if doc_info.get('Top Links'):
        add_bullet_list(doc, doc_info['Top Links'], title='Top Documentation Links:', style='List Bullet 2')

    # Installation
    add_section_heading(doc, 'Installation', level=1)
    install = data.get('Installation', {})
    if install.get('Links'):
        add_bullet_list(doc, install['Links'], title='Installation Links:', style='List Bullet 2')
    if install.get('Summary'):
        doc.add_paragraph('Installation Summary:', style='List Bullet')
        summary = install['Summary']
        if isinstance(summary, dict):
            for key, value in summary.items():
                doc.add_paragraph(f"{key}:", style='List Bullet 2')
                if isinstance(value, list):
                    for item in value:
                        doc.add_paragraph(str(item), style='List Bullet 3')
                else:
                    doc.add_paragraph(str(value), style='List Bullet 3')

    # Other Links
    add_section_heading(doc, 'Other Links', level=1)
    other = data.get('Other Links', {})
    if other.get('All Documentation Links'):
        add_bullet_list(doc, other['All Documentation Links'], title='All Documentation Links:', style='List Bullet 2')
    if other.get('All Installation Links'):
        add_bullet_list(doc, other['All Installation Links'], title='All Installation Links:', style='List Bullet 2')

    # Save the document
    doc.save(word_path)
    print(f"Exported to {word_path}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: python export_to_word.py <input_json>")
        sys.exit(1)
    json_path = sys.argv[1]
    if not os.path.exists(json_path):
        print(f"Input file {json_path} does not exist.")
        sys.exit(1)
    json_to_professional_word(json_path) 